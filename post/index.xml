<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Joseph V. Casillas</title>
    <link>http://jvcasillas.github.io/post/</link>
      <atom:link href="http://jvcasillas.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Joseph V. Casillas © 2021 </copyright><lastBuildDate>Sun, 01 Jan 2017 00:00:00 -0500</lastBuildDate>
    <image>
      <url>http://jvcasillas.github.io/img/jvc2016.png</url>
      <title>Posts</title>
      <link>http://jvcasillas.github.io/post/</link>
    </image>
    
    <item>
      <title>Setting up a whisper room sound booth</title>
      <link>http://jvcasillas.github.io/post/2018-09-16_setting_up_a_whisper_room_sound_booth/</link>
      <pubDate>Sun, 16 Sep 2018 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2018-09-16_setting_up_a_whisper_room_sound_booth/</guid>
      <description>


&lt;div id=&#34;packaging&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;div id=&#34;soundbooth_packaging&#34; class=&#34;carousel slide&#34; data-ride=&#34;carousel&#34; data-interval=&#34;false&#34;&gt;
&lt;div class=&#34;carousel-inner&#34; role=&#34;listbox&#34;&gt;
&lt;div class=&#34;item active&#34;&gt;
&lt;img src=&#34;./img/01.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/02.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/03.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/04.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/05.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/06.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;a class=&#34;left carousel-control&#34; href=&#34;#soundbooth_packaging&#34; role=&#34;button&#34; data-slide=&#34;prev&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Previous&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&#34;right carousel-control&#34; href=&#34;#soundbooth_packaging&#34; role=&#34;button&#34; data-slide=&#34;next&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Next&lt;/span&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;assembly&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Assembly&lt;/h2&gt;
&lt;div id=&#34;soundbooth_assembly&#34; class=&#34;carousel slide&#34; data-ride=&#34;carousel&#34; data-interval=&#34;false&#34;&gt;
&lt;div class=&#34;carousel-inner&#34; role=&#34;listbox&#34;&gt;
&lt;div class=&#34;item active&#34;&gt;
&lt;img src=&#34;./img/07.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/09.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/10.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/11.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/12.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/13.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/14.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/15.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/16.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/17.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;a class=&#34;left carousel-control&#34; href=&#34;#soundbooth_assembly&#34; role=&#34;button&#34; data-slide=&#34;prev&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Previous&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&#34;right carousel-control&#34; href=&#34;#soundbooth_assembly&#34; role=&#34;button&#34; data-slide=&#34;next&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Next&lt;/span&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;aftermath&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;div id=&#34;soundbooth_cleanup&#34; class=&#34;carousel slide&#34; data-ride=&#34;carousel&#34; data-interval=&#34;false&#34;&gt;
&lt;div class=&#34;carousel-inner&#34; role=&#34;listbox&#34;&gt;
&lt;div class=&#34;item active&#34;&gt;
&lt;img src=&#34;./img/18.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/19.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/20.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./img/21.png&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;a class=&#34;left carousel-control&#34; href=&#34;#soundbooth_cleanup&#34; role=&#34;button&#34; data-slide=&#34;prev&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Previous&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&#34;right carousel-control&#34; href=&#34;#soundbooth_cleanup&#34; role=&#34;button&#34; data-slide=&#34;next&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Next&lt;/span&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;walkthrough&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Walkthrough&lt;/h2&gt;
&lt;div id=&#34;soundbooth_walkthrough&#34; class=&#34;carousel slide&#34; data-ride=&#34;carousel&#34; data-interval=&#34;false&#34;&gt;
&lt;div class=&#34;carousel-inner&#34; role=&#34;listbox&#34;&gt;
&lt;div class=&#34;item active&#34;&gt;
&lt;img src=&#34;./vids/vents.mov&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;item&#34;&gt;
&lt;img src=&#34;./vids/inside.mov&#34; class=&#34;img-responsive center-block&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;a class=&#34;left carousel-control&#34; href=&#34;#soundbooth_walkthrough&#34; role=&#34;button&#34; data-slide=&#34;prev&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Previous&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&#34;right carousel-control&#34; href=&#34;#soundbooth_walkthrough&#34; role=&#34;button&#34; data-slide=&#34;next&#34;&gt;
&lt;span class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;sr-only&#34;&gt;Next&lt;/span&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Justin Bieber sings in Spanish: How&#39;d he do?</title>
      <link>http://jvcasillas.github.io/post/2017-05-15_analysis_of_justin_bieber_singing_in_spanish_-_despacito/</link>
      <pubDate>Mon, 15 May 2017 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2017-05-15_analysis_of_justin_bieber_singing_in_spanish_-_despacito/</guid>
      <description>


&lt;div id=&#34;tl-dr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TL; DR&lt;/h3&gt;
&lt;div style=&#34;float:right&#34;&gt;
&lt;p&gt;&lt;img width=&#34;40px&#34; src=&#34;../../img/fill.png&#34;&gt;
&lt;img src=&#34;http://media2.giphy.com/media/vVj7DgouGmmqI/giphy.gif&#34; alt=&#34;bieber&#34; /&gt;
&lt;img height=&#34;10px&#34; width=&#34;0px&#34; src=&#34;../../img/fill.png&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the remixed version of the song “despacito”, Justin Bieber sings in Spanish.
Some articles online criticize his pronunciation. I analyzed his realization of
“p” and “t” in Praat and find that, while his pronunciation is not perfect, it is
pretty good. I don’t believe he commits the “errors” suggested in the article.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;I recently heard the song &lt;code&gt;despacito&lt;/code&gt; featuring teen hero Justin Bieber (my wife
mentioned to me that he sings in Spanish and my curiosity got the best of me).
I distinctly remember being rather impressed by how well he sang in Spanish, so I was
surprised when I saw &lt;a href=&#34;http://remezcla.com/music/j-balvin-nicky-jam-despacito-remix/&#34;&gt;this&lt;/a&gt;
article pop up in my facebook feed. Basically, J Balvin and Nicky Jam (I have
no idea who these guys are) make fun of J Biebs accent. Specifically, they
harp on his pronunciation of the title of the song, suggesting the /t/ in the
diminutive form of “despacio” (slow) is realized as [ɹ]. In fact, they sing it
a few times [des.pa.si.ɹo] (des-pa-see-row, if you aren’t familiar with IPA) and,
in jest, claim at one point that he sings ‘dorito’ [ðo.ɹi.ɾo]. You can watch this
specific part here:&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/jtCScBRaX9k?ecver=1&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Now, this type of non-native pronunciation actually makes a lot of sense, at least
I think the ‘dorito’ comment does. In American and Canadian English an intervocalic
“t” (and “d”) is usually pronounced as a flap, which in essence corresponds with
Spanish “r” in the same position (note: it has to be in the same position, otherwise
it would pronounced as a trill). This leads to all kinds of difficulties for learners
of Spanish because they have to avoid a phonological process of their native language.
For example, a common mispronunciation of the Spanish word “todo” (all) is [to.ɾo],
which actually means “toro” (bull). That is, English speakers (mis)pronounce the
intervocalic /d/ as a flap, which is most perceptually similar to Spanish “r”. On the
other hand, when they try to pronounce “toro”, the “r” is realized as the English rhotic
[ɹ].&lt;/p&gt;
&lt;p&gt;Thus, if Bieber were pronouncing /ito/ as most native English speakers do, as a flap,
it would be perceived as a Spanish “r” (the flap, not the trill). However, there is no
real explanation for why he would pronounce it with an English rhotic ([ɹ]) as J Balvin
and Nicky Jam claim. I personally did not hear this pronunciation, so I assume they were
just teasing the teenage heart throb. Nonetheless, I noticed a lot of comments in the
article were also making fun of his pronunciation, so I decided I would take a look in
praat to determine if I am going crazy or if the internet is just full of haters. Here
is an example of what we will look at:&lt;/p&gt;
&lt;/br&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;audio controls&gt;
&lt;source src=&#34;./wavs/segmented/despacito.wav&#34; type=&#34;audio/mpeg&#34;&gt;
Your browser does not support the audio element.
&lt;/audio&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The analysis&lt;/h3&gt;
&lt;p&gt;I downloaded the music video from youtube and converted the .mp4 file to .m4a, and then
to .wav. In praat I converted the .wav from stereo to mono. Justin sings the chorus as well
as some of the verses. I’m just going to look at the chorus because the verses are accompanied
by Daddy Yankee and/or Luis Fonsi. Luckily, pretty much every time he says “despacito” in the
chorus there is silence, so we can use that for our analysis. I am going to focus on how he
pronounces the stop /t/ (though I did get formant frequency measurements for all the vowels…
maybe for another post). This only leaves us with about 5 useful tokens, but there are also a
good amount of /p/’s that we can compare them with. Here is arguably the best token:&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;p&gt;&lt;img src=&#34;./figs/despacito.png&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It’s clear—at least to me—that Justin is not producing an English rhotic where he should
be producing [t]. In other words, he is &lt;em&gt;not&lt;/em&gt; saying des-pa-see-row. How do I know? Well,
if we zoom in on the final /ito/, we notice two things: 1) there is clearly a closure and
2) there is a burst. These are characteristics of a stop consonant. Now, you might be thinking
“Yeah, but a flap looks pretty similar in a spectrogram” and you wouldn’t be wrong, but the
clear difference here is that after the release there is a short gap before the voicing of the
final /o/. This short gap is called voice-onset time (VOT). Stops have VOT; flaps do not. Here
is a close up:&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;p&gt;&lt;img src=&#34;./figs/ito.png&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now a characteristic of English voiceless stops (“p”, “t”, “k”) is that in word initial position
they are produced with aspiration and have long-lag VOT, usually around 60 ms. We refer to them
with IPA with: [p&lt;sup&gt;h&lt;/sup&gt;, t&lt;sup&gt;h&lt;/sup&gt;, k&lt;sup&gt;h&lt;/sup&gt;]. Voiceless stops are different in Spanish, as they are not aspirated
and have short-lag VOT, usually from 0 to 25 ms. The “ito” of “despacito” is word internal, thus,
in theory, for an English speaker it should not be aspirated because it is normally realized as a flap, though in emphatic
speech it could be realized as [t&lt;sup&gt;h&lt;/sup&gt;]. Hopefully I have already convinced you that Biebs is not
flapping. So our next question is: what kind of VOT do his stops have? If they are short-lag, we can
conclude that they are more Spanish-like. If, on the other hand, they are aspirated, then they
would be more English-like. So let’s take a look!&lt;/p&gt;
&lt;p&gt;I measured VOT of every p and t every time Justin sings “despacito”. First, let’s load some packages
we will need.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lingStuff); library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can load the data and check the structure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
bieber_vot &amp;lt;- read_csv(&amp;quot;./data/despacito.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Check structure of dataframe
bieber_vot %&amp;gt;%
  select(., prefix, votP, votT) %&amp;gt;%
  gather(., key = phon, value = vot, -prefix) %&amp;gt;%
  str(.)
## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    10 obs. of  3 variables:
##  $ prefix: chr  &amp;quot;despacito&amp;quot; &amp;quot;despacito1&amp;quot; &amp;quot;despacito2&amp;quot; &amp;quot;despacito3&amp;quot; ...
##  $ phon  : chr  &amp;quot;votP&amp;quot; &amp;quot;votP&amp;quot; &amp;quot;votP&amp;quot; &amp;quot;votP&amp;quot; ...
##  $ vot   : num  23.3 19.2 19 19.4 15.6 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks good. Let’s plot the VOT of the p’s and t’s and see how they look. I’ve
set the x-limit to range from 0 to 60.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot vot as a function of phon
bieber_vot %&amp;gt;%
  select(., prefix, votP, votT) %&amp;gt;%
  gather(., key = phon, value = vot, -prefix) %&amp;gt;%
  ggplot(., aes(x = phon, y = vot, color = phon)) + 
    stat_summary(fun.data = &amp;#39;mean_cl_boot&amp;#39;, geom = &amp;#39;pointrange&amp;#39;, size = 1.1) +
    stat_summary(fun.y = &amp;#39;mean&amp;#39;, geom = &amp;#39;point&amp;#39;, color = &amp;#39;darkred&amp;#39;, size = 2.75) +
    ylim(0, 60) + ylab(&amp;quot;VOT (ms)&amp;quot;) + xlab(&amp;quot;&amp;quot;) + 
    scale_x_discrete(labels = c(&amp;#39;/p/&amp;#39;, &amp;#39;/t/&amp;#39;)) + 
    coord_flip() + 
    scale_color_brewer(name = &amp;#39;&amp;#39;, guide = F) + 
    theme_dark(base_size = 22, base_family = &amp;quot;Times&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./figure-html/unnamed-chunk-5-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Recall that an English-like VOT would be around 60 ms (but could range from around
40 to over 100!). We can see that the p’s have a VOT of approximately 20 ms
(19.29 ms +/- 2.72 sd, to be
exact), and the t’s have a VOT of around 25 ms (23.1 ms
+/- 7.39 sd). Both are certainly within range of native
Spanish pronunciations.&lt;/p&gt;
&lt;p&gt;&lt;grey&gt;Interim conclusion&lt;/grey&gt;: &lt;blue&gt;the internet is full of haters&lt;/blue&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;not-so-fast&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Not so fast…&lt;/h3&gt;
&lt;p&gt;There is one last thing to keep in mind before we give JBiebs a pass on his Spanish and
it’s an important one. Spanish /t/ and English /t/ are articulated at different places in
the mouth. Specifically, Spanish /t/ is dental and English /t/ is alveolar. What this means
is that when an English speaker pronounces a word with a “t” in Spanish, like ‘despacito’,
she also needs to change the place of articulation, i.e. the tongue needs to make contact
with the back of the top teeth, and not the hard ridge right above them. When we looked at
VOT in the present analysis we didn’t take this difference into account. My personal opinion is
that el señorito does a pretty good job, but if you listen closely to the very last ‘despacito’
in the song, it does sound rather alveolar, i.e. gringo-y.&lt;/p&gt;
&lt;p&gt;&lt;grey&gt;Conclusion&lt;/grey&gt;: &lt;blue&gt;the internet is full of haters&lt;/blue&gt;.&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;

blue {
    color: #0000CC;
    font-weight: normal;
    font-size: 20px;
}

grey {
    color: #515151;
    font-size: 22px;
    font-weight: normal;
}

.video-container {
    position: relative;
    padding-bottom: 50%;
    padding-top: 35px;
    height: 0;
    overflow: hidden;
    width: 70%;
}

.video-container iframe {
    position: center;
    top:0;
    left: 0;
    width: 100%;
    height: 100%;
}

&lt;/style&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>tidyr tutorial</title>
      <link>http://jvcasillas.github.io/post/2015-06-22_tidyr_tutorial/</link>
      <pubDate>Mon, 22 Jun 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-06-22_tidyr_tutorial/</guid>
      <description>


&lt;meta http-equiv=&#34;refresh&#34; content=&#34;0; url=&#39;http://www.jvcasillas.com/tidyr_tutorial/&#39;&#34;/&gt;
</description>
    </item>
    
    <item>
      <title>How to scrape data from Google Sheets in R</title>
      <link>http://jvcasillas.github.io/post/2015-06-16_google_sheets_in_r/</link>
      <pubDate>Tue, 16 Jun 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-06-16_google_sheets_in_r/</guid>
      <description>


&lt;p&gt;Google Forms offers a convenient way to collect data online. It is particularly
useful because you can embed the form in a webpage, link the results with a
spreadsheet and publish the results online. This post shows how to scrape the
data from the spreadsheet (google form) in &lt;code&gt;r&lt;/code&gt; using the package &lt;code&gt;RCurl&lt;/code&gt;. You
should be able to follow along by copying and pasting the code into an R
session.&lt;/p&gt;
&lt;p&gt;Ideally you can use this method once you have collected data using a google
form. For our purposes I just created a google sheet and I will scrape the data
from there.&lt;/p&gt;
&lt;div id=&#34;get-some-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get some data&lt;/h3&gt;
&lt;p&gt;To show how this works, I simulated some data with the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create fake data
# to save in google sheet

set.seed(1)
df &amp;lt;- data.frame(
    subj = 1:30, 
    group = gl(2, 15, labels = c(&amp;quot;mono&amp;quot;, &amp;quot;bi&amp;quot;)), 
    score = c(rnorm(15, 87, 8), rnorm(15, 94, 3))
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then copy and pasted the data frame into a google sheet. To do this, open
google drive and create a new sheet.&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;400&#34; src=&#34;./img/data.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you have some data in a sheet you
need to do a few things before you are ready to fire up R.&lt;/p&gt;
&lt;p&gt;First, you need to publish your sheet to the web (File &amp;gt; Publish to the web…):&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;400&#34; src=&#34;./img/publish.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Publish the sheet and copy the public link from the window.&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;400&#34; src=&#34;./img/link.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, my link is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM/pubhtml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy your link and save it somewhere. We will
need it in just a second.&lt;/p&gt;
&lt;p&gt;Now we’re ready for R. Here are the packages I used:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load libraries

library(dplyr); library(tidyr); library(RCurl)
library(ggplot2); library(DT); library(pander)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;scrape&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scrape&lt;/h3&gt;
&lt;p&gt;We will use the &lt;code&gt;RCurl&lt;/code&gt; package to scrape the data. The command we need is
&lt;code&gt;getForm()&lt;/code&gt;. The first arguement represents the URI to which the form is posted.
You can just use the one shown below for a google sheet. The important part here
is the &lt;code&gt;key&lt;/code&gt; arguement. You need to copy it from the link you saved above. The
key can be found in the last part of the link. Here is my link again:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM/pubhtml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically we want:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore we can delete &lt;code&gt;https://docs.google.com/spreadsheets/d/&lt;/code&gt; from the
beginning, as well as &lt;code&gt;/pubhtml&lt;/code&gt; from the end. Check the &lt;code&gt;key&lt;/code&gt; arguement below.
Finally, we use the &lt;code&gt;read.csv()&lt;/code&gt; command to import the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# scrape data

sheet = getForm(&amp;quot;https://spreadsheets.google.com/spreadsheet/pub&amp;quot;, 
                hl =&amp;quot;en_US&amp;quot;, 
                key = &amp;quot;1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM&amp;quot;, 
                output = &amp;quot;csv&amp;quot;, 
                .opts = list(followlocation = TRUE, 
                             verbose = TRUE, 
                             ssl.verifypeer = FALSE)) 

df &amp;lt;- read.csv(textConnection(sheet))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see if it worked…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pandoc.table(df, style = &amp;quot;rmarkdown&amp;quot;, round = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;subj&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;group&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;81.99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;88.47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;80.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;99.76&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;89.64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;80.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;90.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;92.91&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;91.61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;84.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;99.09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;90.12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;82.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;69.28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;mono&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93.87&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93.95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;96.83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;96.46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;95.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;96.76&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;22&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;96.35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;94.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;88.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;95.86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93.83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93.53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;28&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;89.59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;92.57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;95.25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Looks good. Now we can visualize and analyze the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  ggplot(., aes(x = as.numeric(group), y = score)) +
  scale_x_discrete(limits = c(2, 1), labels = c(&amp;quot;Bilingual&amp;quot;, &amp;quot;Monolingual&amp;quot;)) +
  geom_jitter() +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;) + 
  labs(x = &amp;quot;Group&amp;quot;, y = &amp;quot;Score&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img width=&#34;650&#34; src=&#34;./img/plot1.pdf&#34;&gt;&lt;/p&gt;
&lt;p&gt;And that’s it.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data pipelines in R</title>
      <link>http://jvcasillas.github.io/post/2015-05-18_data_pipelines/</link>
      <pubDate>Mon, 18 May 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-05-18_data_pipelines/</guid>
      <description>


&lt;div id=&#34;overview&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;So you thought up a clever experiment, got IRB approval, recruited participants
and collected data… now what? New researchers are often confronted with an
unfortunate surprise when it comes time to perform some kind of analysis on
their data: they don’t know how, or even where to start. This can be a problem
for something trivial, like obtaining simple descriptive statistics, or
something much more complex, like fitting models, creating plots and making
predictions. When we conduct experiments we don’t usually begin by thinking
about how we will analyze our data, and in many academic programs this is not
explicitly taught to new students. For most people, especially beginners, the
data analysis issue arises later on in the process, usually after the data have
already been collected (although I think this ultimately changes with
experience).&lt;/p&gt;
&lt;p&gt;In light of all of this, I think that something handy to learn and evaluate
early on is how data analysis typically flows: from obtaining data to obtaining
new insight from the data. This is the data analysis pipeline, which usually
looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./img/pipeline1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;In essence, the process is simple. After collecting your data, you need to
&lt;em&gt;tidy&lt;/em&gt; it (step 2) so that it can be loaded and analyzed by your statistical
software. After tidying your data, you usually have to transform it (step 3)
in some way (also called data preprocessing). This can be occur via the creation
of new variables, combining variables, sub-setting variables, etc. Once you have
transformed your data, it’s time to visualize it (step 4a) via graphs/plots,
and, finally, analyze it. The visualization and analysis steps are often iterative:
you might notice something in a graph that leads you to a new
analysis, or some kind of insight that requires more data transformation and a
new analysis, and so on and so forth until you have obtained new insight and are
able to answer your research question(s).&lt;/p&gt;
&lt;p&gt;So, at the heart of data analysis is &lt;code&gt;tidy data&lt;/code&gt;. Most new researchers don’t
know what it means to tidy and transform their data, nor that it is probably
the most important part of any data analysis. Basically, if your data are not
formatted in a way in which they can be easily analyzed (via excel, SPSS, R,
etc.), then you can’t do anything with them.&lt;/p&gt;
&lt;p&gt;In order to facilitate the data analysis pipeline, it is crucial to have &lt;code&gt;tidy  data&lt;/code&gt;. What this means is that &lt;strong&gt;every column in your data frame represents a
variable and every row represents an observation&lt;/strong&gt;. This is also referred to as
&lt;em&gt;long format&lt;/em&gt; (as opposed to wide format). Most statistical software requires
your data to be in long format, with few exceptions (i.e. repeated measures
ANOVA in SPSS).&lt;/p&gt;
&lt;p&gt;In what follows, I take you through three packages that have been created in
order to facilitate the data analysis pipeline in R. Each package was created
by Hadley Wickham with steps 2, 3, and 4a of the pipeline in mind. Thus we can
associate each package with the corresponding step:&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./img/pipeline2.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jvcasillas.com/tidyr_tutorial/&#34;&gt;tidyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dplyr&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jvcasillas.com/base_lattice_ggplot/&#34;&gt;basic plotting in r&lt;/a&gt; / ggvis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(coming soon)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basic plotting in R</title>
      <link>http://jvcasillas.github.io/post/2015-04-20_plotting_in_r/</link>
      <pubDate>Mon, 20 Apr 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-04-20_plotting_in_r/</guid>
      <description>


&lt;meta http-equiv=&#34;refresh&#34; content=&#34;0;url= http://www.jvcasillas.com/base_lattice_ggplot/&#34;/&gt;
</description>
    </item>
    
    <item>
      <title>HTML widgets in Rmarkdown</title>
      <link>http://jvcasillas.github.io/post/2015-04-13_html_widgets/</link>
      <pubDate>Mon, 13 Apr 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-04-13_html_widgets/</guid>
      <description>


&lt;meta http-equiv=&#34;refresh&#34; content=&#34;0; url=&#39;http://www.jvcasillas.com/html_widgets/index.html&#39;&#34;/&gt;
</description>
    </item>
    
    <item>
      <title>Slidify tutorial</title>
      <link>http://jvcasillas.github.io/post/2015-03-22_slidify_tutorial/</link>
      <pubDate>Sun, 22 Mar 2015 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2015-03-22_slidify_tutorial/</guid>
      <description>


&lt;meta http-equiv=&#34;refresh&#34; content=&#34;0; url=&#39;http://www.jvcasillas.com/slidify_tutorial/&#39;&#34;/&gt;
&lt;!--  add lines here --&gt;
&lt;!-- title       : Checking Slides within Blogify --&gt;
&lt;!-- author      : Joseph Casillas --&gt;
&lt;!-- job         : PhD Candidate  --&gt;
&lt;!-- date        : 2015-03-22 --&gt;
&lt;!-- framework   : io2012 --&gt;
&lt;!-- tags        : [tag1, tag2] --&gt;
&lt;!-- widgets     : [mathjax, quiz, bootstrap] --&gt;
&lt;!-- highlighter : highlight.js --&gt;
&lt;!-- hitheme     : solarized_light --&gt;
&lt;!-- logo        : ua.png --&gt;
&lt;!-- biglogo     : ua.png --&gt;
&lt;!--  --&gt;
&lt;!-- ## Testing --&gt;
&lt;!-- - This is a test --&gt;
&lt;!-- - Poirot can be used to make slide decks from within blog posts --&gt;
&lt;!-- - Eventually I will turn this into a slidify tutorial --&gt;
&lt;!-- ```{r} --&gt;
&lt;!-- 2 + 2 --&gt;
&lt;!-- ``` --&gt;
</description>
    </item>
    
    <item>
      <title>TikzDevice tutorial III: standalone plots</title>
      <link>http://jvcasillas.github.io/post/2014-05-28_tikz_-_standalone_plots/</link>
      <pubDate>Wed, 28 May 2014 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2014-05-28_tikz_-_standalone_plots/</guid>
      <description>


&lt;p&gt;In this post I’m going to show you how to use &lt;code&gt;TikzDevice&lt;/code&gt; to create high quality plots that use the same font as your &lt;code&gt;LaTeX&lt;/code&gt; document. I’m assuming that you have already installed &lt;code&gt;tikz&lt;/code&gt;. If not, see &lt;a href=&#34;http://jvcasillas.github.io/blog/2013-05-11_tikz_-_installation/index.html&#34;&gt;part I&lt;/a&gt; in this series. Moreover, this tutorial assumes that you have set up your project in the same way outlined in &lt;a href=&#34;http://jvcasillas.github.io/blog/2013-05-17_tikz_-_projects/index.html&#34;&gt;part II&lt;/a&gt;. An added benefit to this approach is that it allows you to insert IPA symbols into the plot via the &lt;code&gt;tipa&lt;/code&gt; package.&lt;/p&gt;
&lt;div id=&#34;the-latex-file&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;The LaTeX file&lt;/h4&gt;
&lt;p&gt;Ok. You should start with a &lt;code&gt;LaTeX&lt;/code&gt; file that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\documentclass{article}
\usepackage{tikz}
\usepackage{tipa}

\begin{document}

&amp;lt;&amp;lt;&amp;gt;&amp;gt;=
require(tikzDevice)
tikz(&amp;#39;plot.tex&amp;#39;, standAlone=TRUE)
library(stats)
plot(cars)
lines(lowess(cars))
dev.off()
@

\end{document}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have experience working with &lt;code&gt;LaTeX&lt;/code&gt;, the preamble should be pretty straightforward (If you need a quick primer on &lt;code&gt;LaTeX&lt;/code&gt;, see this tutorial). The important part so far is that you have to include &lt;code&gt;\usepackage{tikz}&lt;/code&gt; and &lt;code&gt;\usepackage{tipa}&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; &lt;code&gt;\begin{document}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-r-code&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;The R code&lt;/h4&gt;
&lt;p&gt;In &lt;code&gt;knitr&lt;/code&gt;, R code goes between &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;=&lt;/code&gt; and ends with &lt;code&gt;@&lt;/code&gt;. So all of this is R code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tikzDevice)
tikz(&amp;#39;plots/cars-plot.tex&amp;#39;, standAlone=TRUE)
library(stats)
plot(cars)
lines(lowess(cars))
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command &lt;code&gt;require(tikzDevice)&lt;/code&gt; loads tikz into the R workspace. Then, &lt;code&gt;tikz(&#39;plots/cars-plot.tex&#39;, standAlone=TRUE)&lt;/code&gt; calls the tikz device and creates the file &lt;code&gt;cars-plot.tex&lt;/code&gt; in the folder &lt;code&gt;plots&lt;/code&gt;. It is important to set &lt;code&gt;standAlone&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt; if you want to have a separate .tex file (this is what allows us to keep the fonts the same as the rest of the document). From this point on until the call &lt;code&gt;dev.off()&lt;/code&gt;, we enter what we want to appear in our .tex file. In this case I have plotted the typical &lt;code&gt;cars&lt;/code&gt; data from the library &lt;code&gt;stats&lt;/code&gt;. Here is the PDF output produced when &lt;code&gt;cars-plot.tex&lt;/code&gt; is compiled. Notice the font is different from what you typical get in R.&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;img/plot.pdf&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let’s try something a little more involved and add some IPA. I will use a fake dataset and load it into R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_data &amp;lt;- read.delim(&amp;quot;assets/my_data.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use ggplot2 for this graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will call tikz device.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tikzDevice)
options(tikzLatexPackages = c(getOption(&amp;quot;tikzLatexPackages&amp;quot;), &amp;quot;\\usepackage{tipa}&amp;quot;))
tikz(&amp;#39;plots/ipa_plot.tex&amp;#39;, standAlone=TRUE, width=10, height=6)
my_data$group &amp;lt;- factor(my_data$group, levels = c(&amp;quot;EL&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;LL&amp;quot;))
df&amp;lt;-with(my_data, aggregate(fpro, list(group=group, fstim=fstim), mean))
df$se&amp;lt;-with(my_data, aggregate(fpro, list(group=group, fstim=fstim), function(x) sd(x)/sqrt(10)))[,3]
gp &amp;lt;- ggplot(df, aes(x=fstim, y=x, colour=group, ymin=x-se, ymax=x+se))
gp + geom_line(aes(linetype=group), size = .5) + 
    geom_point(aes(shape=group)) + 
    geom_ribbon(alpha = 0.15, linetype=0) + 
    ylim(0, 1) + 
    scale_x_continuous(breaks=seq(0, 10, by=1)) +
    labs(list(title = &amp;quot;[\\textesh ip/\\textesh\\textsci p]&amp;quot;, 
            x = &amp;quot;Stimuli&amp;quot;, y = &amp;quot;\\% [\\textesh\\textsci p]&amp;quot;)) +
    theme_bw() +
    theme(legend.background = element_rect(colour = &amp;#39;grey50&amp;#39;, 
        fill = &amp;#39;grey97&amp;#39;, size = .75, linetype=&amp;#39;solid&amp;#39;)) +
    scale_linetype_discrete(&amp;quot;Group&amp;quot;) +
    scale_shape_discrete(&amp;quot;Group&amp;quot;) +
    scale_colour_discrete(&amp;quot;Group&amp;quot;)
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that after the &lt;code&gt;require(tikzDevice)&lt;/code&gt; call, we included&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(tikzLatexPackages = c(getOption(&amp;quot;tikzLatexPackages&amp;quot;), &amp;quot;\\usepackage{tipa}&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key component here is &lt;code&gt;\\usepackage{tipa}&lt;/code&gt;. This means that tipa will be included in the .tex produced from the code, which, in turn, means that we can include IPA sybold in the plot before it is produced. The &lt;code&gt;tikz(&#39;plots/ipa_plot.tex&#39;, standAlone=TRUE, width=5, height=5)&lt;/code&gt; call creates &lt;code&gt;ipa_plot.tex&lt;/code&gt; in the folder &lt;code&gt;plots&lt;/code&gt;. The rest of the code (up to &lt;code&gt;dev.off()&lt;/code&gt;) is the actual plot. Notice that we have included ipa in the following command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;labs(list(title = &amp;quot;[\\textesh ip/\\textesh\\textsci p]&amp;quot;, 
          x = &amp;quot;Stimuli&amp;quot;, y = &amp;quot;\\% [\\textesh\\textsci p]&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the plot that is produced when the resulting .tex file is compiled:&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;img/ipa_plot.pdf&#34;&gt;&lt;/p&gt;
&lt;p&gt;And that’s it. We have produced a beautiful plot that uses the same font as our document and includes IPA symbols. You can download all the files &lt;a href=&#34;files/master.zip&#34;&gt;here&lt;/a&gt; and try it yourself.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Knitr bootstrap</title>
      <link>http://jvcasillas.github.io/post/2014-05-26_knitr_bootstrap/</link>
      <pubDate>Mon, 26 May 2014 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2014-05-26_knitr_bootstrap/</guid>
      <description>


&lt;p&gt;Knitr bootstrap makes generating standalone reports extremely easy and the output looks really neat. Check out the example &lt;a href=&#34;http://jvcasillas.github.io/blog/assets/knitr_bootstrap/knitr_bootstrap.html&#34;&gt;here&lt;/a&gt;. To recreate this you need to download the preview release of &lt;a href=&#34;http://rmarkdown.rstudio.com/index.html&#34;&gt;R Studio&lt;/a&gt;, and set up the front matter as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
output:
  knitrBootstrap::bootstrap_document:
    title: &amp;quot;&amp;quot;
    theme: default
    highlight: sunburst
    theme.chooser: TRUE
    highlight.chooser: TRUE
---&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting markdown files to HTML5 in RStudio</title>
      <link>http://jvcasillas.github.io/post/2014-01-07_converting_rmarkdown_files_to_html5/</link>
      <pubDate>Tue, 07 Jan 2014 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2014-01-07_converting_rmarkdown_files_to_html5/</guid>
      <description>


&lt;div id=&#34;html5-slides&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;HTML5 slides&lt;/h4&gt;
&lt;p&gt;I recently learned how to create HTML5 slides using &lt;strong&gt;.Rmd&lt;/strong&gt; files and &lt;strong&gt;pandoc&lt;/strong&gt;. &lt;a href=&#34;http://jvcasillas.github.io/blog/assets/md_to_html5_ex/md_html_ex.html&#34;&gt;Click here&lt;/a&gt; to check out an example. I will be posting a tutorial on how to do this in the near future (I hope).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; &lt;a href=&#34;http://jvcasillas.github.io/blog/assets/mages_ex/mages_ex.html&#34;&gt;Here&lt;/a&gt; is a much cooler example I found on &lt;a href=&#34;http://lamages.blogspot.com.au/2012/05/interactive-reports-in-r-with-knitr-and.html&#34;&gt;mages’ blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt; This process has been streamlined in the newest update to RStudio (&lt;a href=&#34;http://rmarkdown.rstudio.com/index.html&#34;&gt;check it out here&lt;/a&gt;). The results are quite impressive (&lt;a href=&#34;http://jvcasillas.github.io/blog/assets/reveal/reaveal.html&#34;&gt;Ex. 1&lt;/a&gt;, &lt;a href=&#34;http://jvcasillas.github.io/blog/assets/ioslides/ioslides.html&#34;&gt;Ex. 2&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TikzDevice tutorial II: structuring a project</title>
      <link>http://jvcasillas.github.io/post/2013-05-17_tikz_-_projects/</link>
      <pubDate>Fri, 17 May 2013 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2013-05-17_tikz_-_projects/</guid>
      <description>


&lt;div id=&#34;overview&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;This mini tutorial is part II about incorporating &lt;strong&gt;tikzDevice&lt;/strong&gt; into your workflow. It explains the file structure necessary to successfully include &lt;strong&gt;tikzDevice&lt;/strong&gt; plots into your &lt;strong&gt;LaTeX document&lt;/strong&gt;. You must first have &lt;strong&gt;tikzDevice&lt;/strong&gt; installed. If you don’t, see &lt;a href=&#34;http://jvcasillas.github.io/blog/2013-05-11_tikz_-_installation/index.html&#34;&gt;part I&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-structure&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;The structure&lt;/h4&gt;
&lt;p&gt;A simple yet effective way to do reproducible research is to use &lt;a href=&#34;http://www.r-project.org&#34;&gt;R&lt;/a&gt; (for statistical analysis) directly in a &lt;strong&gt;LaTeX&lt;/strong&gt; environment. There are two ways to accomplish this: (1) Sweave and (2) &lt;a href=&#34;http://yihui.name/knitr/&#34;&gt;knitr&lt;/a&gt;. Knitr seems to be the better choice, as it builds on some of the deficiencies of Sweave, and is what I am currently using in my workflow. In order to successfully “knit” R code into a .tex format we must use a no-web (.nw) file to create the .tex file. There are two types of no-web files: .Rnw and .Snw. I am not completely sure what the differences are between then, but I use .Rnw and that is what I will mention in this tutorial.&lt;/p&gt;
&lt;p&gt;The first step is to create a project folder. For the purposes of this tutorial let’s call this folder “master”. Next, we will need some data and some R code that analyzes it. The most common, no-hassle way to accomplish this in R is to save your R code in a separate .R file. For this tutorial, we will call our data “my-data.txt” and our R code “example.R”. The fake data we are going to analyze is for a two-alternative forced choice identification experiment. So, our fake data is in the “my-data.txt” file and the R code that analyzes it is in the example.R file.&lt;/p&gt;
&lt;p&gt;The next step is to create the “no web” .Rnw file. This is as simple as creating a document in your text editor of choice (I use &lt;a href=&#34;https://github.com/textmate/textmate&#34;&gt;TextMate 2&lt;/a&gt; and &lt;a href=&#34;http://www.sublimetext.com&#34;&gt;Sublime Text 3&lt;/a&gt;) and saving it with a .Rnw extension. For this tutorial we will call this file “example.Rnw”. Its purpose is to call the R code written in “example.R” (which uses the fake data in “my-data.txt”) in order to produce a .tex file (in this case “example.tex”). Still with me? Good.&lt;/p&gt;
&lt;p&gt;Next we need to prepare where we are going to keep the plots produced by tikzDevice. I find it most convenient to have a specific folder, “plots_folder”, where I only keep the tikzDevice plots. So, create this folder inside the “master” folder. TikzDevice creates the R plots and converts them to a LaTeX format (the benefits of this are further explained in part III of this tutorial), saves them in “plots_folder” and we will then include them in the example.tex file which can be compiled into a PDF. The image below shows what this should look like when it’s all said and done.&lt;/p&gt;
&lt;div aligh=&#34;center&#34;&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./img/tikz_workflow.png&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Check out &lt;a href=&#34;http://jvcasillas.github.io/blog/2014-05-28_tikz_-_standalone_plots/index.html&#34;&gt;part III&lt;/a&gt; to learn how to create standalone plots that can include IPA sybols.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TikzDevice tutorial I: install tikzDevice in R</title>
      <link>http://jvcasillas.github.io/post/2013-05-11_tikz_-_installation/</link>
      <pubDate>Sat, 11 May 2013 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2013-05-11_tikz_-_installation/</guid>
      <description>


&lt;div id=&#34;overview&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;This is a short tutorial for getting &lt;strong&gt;tikzDevice&lt;/strong&gt; running on &lt;strong&gt;R&lt;/strong&gt; version 3.0. If
you write in &lt;strong&gt;LaTeX&lt;/strong&gt; and use &lt;strong&gt;R&lt;/strong&gt; for statistics, this is a good way to get your
plots/graphs/etc. into your .tex document. The advantages are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;much higher quality and&lt;/li&gt;
&lt;li&gt;you can use IPA symbols&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;download-tiksdevice&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Download tiksDevice&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TiksDevice&lt;/strong&gt; is no longer officially supported by CRAN because the author was having
trouble keeping it updated in a timely manner (Check out &lt;a href=&#34;http://cran.r-project.org/web/packages/tikzDevice/index.html&#34;&gt;this&lt;/a&gt; webpage if you want
to read a little more about the situation). Nonetheless, the &lt;strong&gt;tikzdevice&lt;/strong&gt; package is
very usable and still available for download. You can download the tar.gz file directly
by clicking &lt;a href=&#34;http://cran.r-project.org/src/contrib/Archive/tikzDevice/tikzDevice_0.6.2.tar.gz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-tiksdevice&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Install tiksDevice&lt;/h4&gt;
&lt;p&gt;Installing a package that is no longer supported is by no means difficult, but not as
simple as &lt;code&gt;install.package(&#39;tikzDevice&#39;)&lt;/code&gt; (try it if you want to see why). Use the
following code install the tar file (make sure to specify your file path to wherever you
downloaded the file). This is what it looked like for me.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;/Users/USERNAME/Downloads/tikzDevice_0.6.2.tar&amp;quot;, repos = NULL, type=&amp;quot;source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;install-dependencies&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Install dependencies&lt;/h4&gt;
&lt;p&gt;In order for &lt;strong&gt;tikzDevice&lt;/strong&gt; to work, you must also install the &lt;strong&gt;filehash&lt;/strong&gt; package. This is much easier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;filehash&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it. Check out &lt;a href=&#34;http://jvcasillas.github.io/blog/2013-05-17_tikz_-_projects/index.html&#34;&gt;this&lt;/a&gt; tutorial to see how to set up a project.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Colored spectrograms in R</title>
      <link>http://jvcasillas.github.io/post/2013-05-09_colored_spectrograms_in_r/</link>
      <pubDate>Thu, 09 May 2013 21:13:14 -0500</pubDate>
      <guid>http://jvcasillas.github.io/post/2013-05-09_colored_spectrograms_in_r/</guid>
      <description>


&lt;p&gt;This is how I made the colored spectrogram from the homepage (it’s me saying ‘welcome’). You need to load the package phonTools into R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(phonTools)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have to load the sound you want to make a spectrogram of (it has to be in your working directory). I recorded mine in Praat.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sound &amp;lt;- loadsound(&amp;#39;welcome.wav&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we’re ready to make a spectrogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spectrogram(sound, fs = 44100, colors = TRUE, maintitle = &amp;quot;Welcome&amp;quot;, maxfreq = 5500)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./img/spectrogram.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also see the oscillogram by using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(sound)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img width=&#34;100%&#34; src=&#34;./img/waveform.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
